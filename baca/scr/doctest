#! /usr/bin/env python
import abjad
import abjadext
import baca
import doctest
import importlib
import io
import os
import pathlib
import sys
from abjadext import tonality


_colors = {
    'BLUE': '\033[94m',
    'RED': '\033[91m',
    'GREEN': '\033[92m',
    'END': '\033[0m',
    }

def _get_globs():
    globs = {}
    globs['abjad'] = abjad
    globs.update(abjad.__dict__)
    globs['abjadext'] = abjadext
    globs.update(abjadext.__dict__)
    globs['baca'] = baca
    globs.update(baca.__dict__)
    try:
        ide = importlib.import_module('ide')
        globs['ide'] = ide
        globs.update(ide.__dict__)
    except ModuleNotFoundError:
        pass
    return globs

def _doctest_files(files, globs):
    optionflags = (
        doctest.NORMALIZE_WHITESPACE
        | doctest.ELLIPSIS
        | doctest.REPORT_ONLY_FIRST_FAILURE
        )
    failed_file_paths, error_messages = [], []
    failure_count, test_count = 0, 0
    current_directory = pathlib.Path('.').absolute()
    for file_ in files:
        assert file_.is_file(), repr(file_)
        relative_path = os.path.relpath(file_)
        string_buffer = io.StringIO()
        with abjad.RedirectedStreams(stdout=string_buffer):
            try:
                failure_count_, test_count_ = doctest.testfile(
                    file_,
                    module_relative=False,
                    globs=globs,
                    optionflags=optionflags,
                    )
            except UnicodeDecodeError:
                continue
            failure_count += failure_count_
            test_count += test_count_
            doctest_output = string_buffer.getvalue()
        if failure_count_:
            failed_file_paths.append(os.path.relpath(file_))
            error_messages.append(doctest_output)
            result_code = ''.join((
                _colors['RED'],
                'FAILED',
                _colors['END'],
                ))
        else:
            result_code = ''.join((
                _colors['BLUE'],
                'OK',
                _colors['END'],
                ))
        print(f'{relative_path} {result_code}')
    if failed_file_paths:
        print()
        for error_message in error_messages:
            print(error_message)
    for file_ in failed_file_paths:
        print(f'FAILED: {file_}')
    print()
    test_identifier = abjad.String('test').pluralize(test_count)
    module_identifier = abjad.String('module').pluralize(len(names))
    success_count = test_count - failure_count
    string = (
        f'{success_count} passed, {failure_count} failed out of '
        f'{test_count} {test_identifier} '
        f'in {len(names)} {module_identifier}.'
        )
    print(string)
    
if __name__ == '__main__':
    if len(sys.argv) <= 1:
        print(f'Must specify one or more files ...')
        sys.exit()
    globs = _get_globs()
    names = sys.argv[1:]
    current_directory = pathlib.Path('.').absolute()
    files = []
    for name in names:
        path = current_directory / name
        if path.is_file():
            files.append(path)
            continue
        assert path.is_dir()
        for path_ in path.glob('**/*.py'):
            if path_.is_file():
                files.append(path_)
    files.sort()
    _doctest_files(files, globs)
