#! /usr/bin/env bash

find_score_contents_directory() {
    package_subtree=${PWD#$SCORES/}
    IFS=/ read -a dirs <<< "$package_subtree"
    package_name=$(IFS=/; echo "${dirs[*]:0:1}")
    echo ${SCORES}/${package_name}/${package_name}
}

get_next_score() {
    package_subtree=${1#$SCORES/}
    IFS=/ read -a dirs <<< "$package_subtree"
    package_name=$(IFS=/; echo "${dirs[*]:0:1}")
    score_packages=$(ls -d $SCORES/*/)
    get_next=0
    next_score_name=NOT_FOUND
    for score_package in $score_packages; do
        score_name=$(basename $score_package)
        if [ $get_next -eq 1 ]; then
            next_score_name=$score_name
            get_next=0
        fi
        if [ $score_name = $package_name ]; then
            get_next=1
        fi
    done
    if [ $next_score_name = NOT_FOUND ]; then
        for score_package in $score_packages; do
            score_name=$(basename $score_package)
            if [ $get_next -eq 1 ]; then
                next_score_name=$score_name
                get_next=0
            fi
        done
    fi
    echo ${SCORES}/${next_score_name}/${next_score_name}
}

get_previous_score() {
    package_subtree=${1#$SCORES/}
    IFS=/ read -a dirs <<< "$package_subtree"
    package_name=$(IFS=/; echo "${dirs[*]:0:1}")
    score_packages=$(ls -d $SCORES/*/)
    get_next=0
    next_score_name=NOT_FOUND
    for x in ${score_packages}; do reversed="${x} ${reversed}"; done
    score_packages=${reversed}
    for score_package in $score_packages; do
        score_name=$(basename $score_package)
        if [ $get_next -eq 1 ]; then
            next_score_name=$score_name
            get_next=0
        fi
        if [ $score_name = $package_name ]; then
            get_next=1
        fi
    done
    if [ $next_score_name = NOT_FOUND ]; then
        for score_package in $score_packages; do
            score_name=$(basename $score_package)
            if [ $get_next -eq 1 ]; then
                next_score_name=$score_name
                get_next=0
            fi
        done
    fi
    echo ${SCORES}/${next_score_name}/${next_score_name}
}


get_next_sibling_directory() {
    me=$(basename ${1})
    directory=$(dirname ${1})
    sibling_directories=$(ls -d ${directory}/[0-9]*/)
    get_next=0
    next_sibling_name=NOT_FOUND
    for path in $sibling_directories; do
        name=$(basename $path)
        if [ $get_next -eq 1 ]; then
            next_name=$name
            get_next=0
        fi
        if [ $name = $me ]; then
            get_next=1
        fi
    done
    if [ $next_sibling_name = NOT_FOUND ]; then
        for path in $sibling_directories; do
            name=$(basename $path)
            if [ $get_next -eq 1 ]; then
                next_name=$name
                get_next=0
            fi
        done
    fi
    echo ${directory}/${next_name}
}


get_previous_sibling_directory() {
    me=$(basename ${1})
    directory=$(dirname ${1})
    sibling_directories=$(ls -d ${directory}/[0-9]*/)
    for x in ${sibling_directories}; do reversed="${x} ${reversed}"; done
    sibling_directories=${reversed}
    get_next=0
    next_sibling_name=NOT_FOUND
    for path in $sibling_directories; do
        name=$(basename $path)
        if [ $get_next -eq 1 ]; then
            next_name=$name
            get_next=0
        fi
        if [ $name = $me ]; then
            get_next=1
        fi
    done
    if [ $next_sibling_name = NOT_FOUND ]; then
        for path in $sibling_directories; do
            name=$(basename $path)
            if [ $get_next -eq 1 ]; then
                next_name=$name
                get_next=0
            fi
        done
    fi
    echo ${directory}/${next_name}
}

go_to_score() {
    package_subtree=${1#$SCORES/}
    IFS=/ read -a dirs <<< "$package_subtree"
    package_name=$(IFS=/; echo "${dirs[*]:0:1}")
    contents=${SCORES}/${package_name}/${package_name}
    clear;
    cd ${contents};
    ls
}

realpath() {
    [[ $1 = /* ]] && echo "$1" || echo "$PWD/${1#./}"
}

trim_score_path() {
    trimmed_path=""
    IFS=/
    for word in $1; do
        if [[ $word != Users && $word != trevorbaca && $word != Scores ]]; then
            trimmed_path="$trimmed_path$word/"
        fi
    done
    IFS=
    trimmed_path=${trimmed_path#/}
    trimmed_path=${trimmed_path%/}
    echo $trimmed_path
}
