#! /usr/bin/env python
"""
Collects segment lys.

Copies illustration.ly, .ily files from segment directories to build/_segments
directory.

Trims top-level comments, header block, paper block from each file.

Keeps score block in each file.

Handles build tags.

The build/_segments directory should be considered disposable:
the builds/.gitignore file should ignore all _segments directories.
"""
import os
import shutil
import sys

import abjad
import baca


def _collect_segment_lys(directory):
    paths = directory.segments.list_paths()
    names = [_.name for _ in paths]
    sources, targets = [], []
    for name in names:
        source = directory.segments / name / "illustration.ly"
        if not source.is_file():
            continue
        target = "segment-" + name.replace("_", "-") + ".ly"
        target = directory._segments / target
        sources.append(source)
        targets.append(target)
    if not directory.builds.is_dir():
        directory.builds.mkdir()
    return zip(sources, targets)


def _trim_illustration_ly(ly):
    assert ly.is_file()
    lines = []
    with ly.open() as file_pointer:
        found_score_context_open = False
        found_score_context_close = False
        for line in file_pointer.readlines():
            if r"\context Score" in line:
                found_score_context_open = True
            if line == "        >>\n":
                found_score_context_close = True
            if found_score_context_open:
                lines.append(line)
            if found_score_context_close:
                lines.append("\n")
                break
    if lines and lines[0].startswith("    "):
        lines = [_[8:] for _ in lines]
    if lines and lines[-1] == "\n":
        lines.pop()
    lines = "".join(lines)
    return lines


for string in sys.argv[1:]:
    if string.startswith("--directory="):
        directory = string[12:]
        break
else:
    directory = os.getcwd()
directory = baca.Path(directory)
assert directory.is_build() or directory.is__segments()
print("Collecting segment lys ...")
pairs = _collect_segment_lys(directory.build)
if not pairs:
    print("... no segment lys found.")
    sys.exit(1)
if not directory._segments.exists():
    directory._segments.mkdir()

fermata_measure_numbers = abjad.OrderedDict()
time_signatures = abjad.OrderedDict()
for source, target in pairs:
    source_ily = source.with_suffix(".ily")
    target_ily = target.with_suffix(".ily")
    if target_ily.exists():
        print(f"Removing {target_ily.trim()} ...")
    if source_ily.is_file():
        print(f"Writing {target_ily.trim()} ...")
        shutil.copyfile(str(source_ily), target_ily)
    if target.exists():
        print(f"Removing {target.trim()} ...")
    print(f"Writing {target.trim()} ...")
    text = _trim_illustration_ly(source)
    target.write_text(text)
    segment = source.parent
    value = segment.get_metadatum("fermata_measure_numbers")
    if value:
        fermata_measure_numbers[segment.name] = value
    value = segment.get_metadatum("time_signatures")
    if value:
        time_signatures[segment.name] = value
key = "fermata_measure_numbers"
if bool(fermata_measure_numbers):
    message = "Writing fermata measure numbers to metadata ..."
    print(message)
    directory.contents.add_metadatum(key, fermata_measure_numbers)
else:
    message = "Removing fermata measure numbers from metadata ..."
    print(message)
    directory.contents.remove_metadatum(key)
key = "time_signatures"
if bool(time_signatures):
    message = "Writing time signatures to metadata ..."
    print(message)
    directory.contents.add_metadatum(key, time_signatures)
else:
    message = "Removing time signatures from metadata ..."
    print(message)
    directory.contents.remove_metadatum(key)
os.system(f"handle-build-tags --directory={directory}")
