#! /usr/bin/env python
"""
Collects segment lys.

Copies illustration.ly, .ily files from segment directories to build/_segments
directory.

Trims top-level comments, header block, paper block from each file.

Keeps score block in each file.

Handles build tags.

The build/_segments directory should be considered disposable:
the builds/.gitignore file should ignore all _segments directories.
"""
import os
import shutil
import sys

import abjad
import baca


def _trim_illustration_ly(ly):
    assert ly.is_file()
    lines = []
    with ly.open() as file_pointer:
        found_score_context_open = False
        found_score_context_close = False
        for line in file_pointer.readlines():
            if r"\context Score" in line:
                found_score_context_open = True
            if line == "        >>\n":
                found_score_context_close = True
            if found_score_context_open:
                lines.append(line)
            if found_score_context_close:
                lines.append("\n")
                break
    if lines and lines[0].startswith("    "):
        lines = [_[8:] for _ in lines]
    if lines and lines[-1] == "\n":
        lines.pop()
    lines = "".join(lines)
    return lines


for string in sys.argv[1:]:
    if string.startswith("--directory="):
        directory = string[12:]
        break
else:
    directory = os.getcwd()
directory = baca.Path(directory)
if not directory.is_build():
    print("Must call script in build directory ...")
    sys.exit(-1)
print("Collecting segment lys ...")
pairs = baca.build.collect_segment_lys(directory.build)
if not pairs:
    print("... no segment lys found.")
    sys.exit(1)
if directory._segments.exists():
    print(f"Removing {directory._segments.trim()} ...")
    directory._segments.remove()
directory._segments.mkdir()

for source, target in pairs:
    source_ily = source.with_suffix(".ily")
    target_ily = target.with_suffix(".ily")
    if target_ily.exists():
        print(f"Removing {target_ily.trim()} ...")
    if source_ily.is_file():
        print(f"Writing {target_ily.trim()} ...")
        shutil.copyfile(str(source_ily), target_ily)
    if target.exists():
        print(f"Removing {target.trim()} ...")
    print(f"Writing {target.trim()} ...")
    text = _trim_illustration_ly(source)
    target.write_text(text)
    segment = source.parent
os.system(f"handle-build-tags --directory={directory}")
