#! /usr/bin/env python
import os
import pathlib
import sys

import abjad
import baca

_GREEN_BOLD='\033[1;32m'
_RED_BOLD='\033[1;31m'
_NC='\033[0m'

def _test_segment(segment_directory):
    assert segment_directory.parent.name == "segments", repr(segment_directory)
    result=0
    clicktrack_midi = segment_directory / "clicktrack.midi"
    layout_ly = segment_directory / "layout.ly"
    layout_py = segment_directory / "layout.py"
    music_ily = segment_directory / "music.ily"
    music_ly = segment_directory / "music.ly"
    music_midi = segment_directory / "music.midi"
    music_pdf = segment_directory / "music.pdf"
    files = [clicktrack_midi, layout_ly, music_ily, music_ly, music_midi, music_pdf]
    for file in files:
        if file.exists():
            file.unlink()
    clicktrack_midi_same = 0
    layout_ly_same = 0
    music_ily_same = 0
    music_ly_same = 0
    music_midi_same = 0
    # run scripts
    if layout_py.exists():
        os.system("python layout.py --print-file-handling")
    flags = [
        "--also-untagged",
        "--clicktrack",
        "--log-timing",
        "--midi",
        "--pdf",
        "--print-file-handling",
        "--print-timing",
    ]
    string = " ".join(flags)
    command = f"python music.py {string}"
    os.system(command)
    # capture diffs
    if clicktrack_midi.is_file():
        _out = segment_directory / ".out"
        if _out.exists():
            _out.unlink()
        command = 'git diff --color=always -I"\version.*" clicktrack.midi > .out'
        with abjad.FilesystemState(remove=[_out]):
            os.system(command)
            with open(_out) as pointer:
                lines = pointer.readlines()
                if lines:
                    string = "".join(lines[:30])
                    print(string)
                    result = 99
                else:
                    clicktrack_midi_same = 1
    if layout_ly.is_file():
        _out = segment_directory / ".out"
        if _out.exists():
            _out.unlink()
        command = 'git diff --color=always -I"\version.*" layout.ly > .out'
        with abjad.FilesystemState(remove=[_out]):
            os.system(command)
            with open(_out) as pointer:
                lines = pointer.readlines()
                if lines:
                    string = "".join(lines[:30])
                    print(string)
                    result = 99
                else:
                    layout_ly_same = 1
    if music_ily.is_file():
        _out = segment_directory / ".out"
        if _out.exists():
            _out.unlink()
        command = 'git diff --color=always -I"\version.*" music.ily > .out'
        with abjad.FilesystemState(remove=[_out]):
            os.system(command)
            with open(_out) as pointer:
                lines = pointer.readlines()
                if lines:
                    string = "".join(lines[:30])
                    print(string)
                    result = 99
                else:
                    music_ily_same = 1
    if music_ly.is_file():
        _out = segment_directory / ".out"
        if _out.exists():
            _out.unlink()
        command = 'git diff --color=always -I"\version.*" music.ly > .out'
        with abjad.FilesystemState(remove=[_out]):
            os.system(command)
            with open(_out) as pointer:
                lines = pointer.readlines()
                if lines:
                    string = "".join(lines[:30])
                    print(string)
                    result = 99
                else:
                    music_ly_same = 1
    if music_midi.is_file():
        _out = segment_directory / ".out"
        if _out.exists():
            _out.unlink()
        command = 'git diff --color=always -I"\version.*" music.midi > .out'
        with abjad.FilesystemState(remove=[_out]):
            os.system(command)
            with open(_out) as pointer:
                lines = pointer.readlines()
                if lines:
                    string = "".join(lines[:30])
                    print(string)
                    result = 99
                else:
                    music_midi_same = 1
    if not music_pdf.exists():
        with open(".music.ly.log") as pointer:
            lines = pointer.readlines()
            print("".join(lines))
        
    # print results

    if clicktrack_midi.is_file():
        print(f"{_GREEN_BOLD}PASS: clicktrack.midi found ...{_NC}")
        if clicktrack_midi_same == 1:
            print(f"{_GREEN_BOLD}PASS: clicktrack.midi same ...{_NC}")
        else:
            print(f"{_RED_BOLD}FAIL: clicktrack.midi changed ...{_NC}")
    else:
        print(f"{_RED_BOLD}FAIL: clicktrack.midi missing ...{_NC}")
        result = 99
            
    if layout_py.is_file():
        if layout_ly.is_file():
            print(f"{_GREEN_BOLD}PASS: layout.ly found ...{_NC}")
            if layout_ly_same == 1:
                print(f"{_GREEN_BOLD}PASS: layout.ly same ...{_NC}")
            else:
                print(f"{_RED_BOLD}FAIL: layout.ly changed ...{_NC}")
        else:
            print(f"{_RED_BOLD}FAIL: layout.ly missing ...{_NC}")
            result = 99

    if music_ily.is_file():
        print(f"{_GREEN_BOLD}PASS: music.ily found ...{_NC}")
        if music_ily_same == 1:
            print(f"{_GREEN_BOLD}PASS: music.ily same ...{_NC}")
        else:
            print(f"{_RED_BOLD}FAIL: music.ily changed ...{_NC}")
    else:
        print(f"{_RED_BOLD}FAIL: music.ily missing ...{_NC}")
        result = 99

    if music_ly.is_file():
        print(f"{_GREEN_BOLD}PASS: music.ly found ...{_NC}")
        if music_ly_same == 1:
            print(f"{_GREEN_BOLD}PASS: music.ly same ...{_NC}")
        else:
            print(f"{_RED_BOLD}FAIL: music.ly changed ...{_NC}")
    else:
        print(f"{_RED_BOLD}FAIL: music.ly missing ...{_NC}")
        result = 99

    if music_midi.is_file():
        print(f"{_GREEN_BOLD}PASS: music.midi found ...{_NC}")
        if music_midi_same == 1:
            print(f"{_GREEN_BOLD}PASS: music.midi same ...{_NC}")
        else:
            print(f"{_RED_BOLD}FAIL: music.midi changed ...{_NC}")
    else:
        print(f"{_RED_BOLD}FAIL: music.midi missing ...{_NC}")
        result = 99

    if music_pdf.is_file():
        print(f"{_GREEN_BOLD}PASS: music.pdf found ...{_NC}")
    else:
        print(f"{_RED_BOLD}FAIL: music.pdf missing ...{_NC}")
        result = 99

    return result

if __name__ == "__main__":
    contents_directory = baca.path.get_contents_directory(os.getcwd())
    segments_directory = contents_directory / "segments"
    first_segment_directory = segments_directory / "01"
    if not first_segment_directory.is_dir():
        print("Score contains no segments ...")
        sys.exit(0)
    for path in segments_directory.glob("[0-9]*"):
        if not path.is_dir():
            continue
        os.chdir(path)
        _test_segment(path)
