#! /usr/bin/env python
import os
import pathlib
import sys
import types

import abjad
import baca

_colors = baca.const.colors


def _capture_diff(path):
    if not path.is_file():
        return
    _out = path.with_name(".out")
    if _out.exists():
        _out.unlink()
    with abjad.FilesystemState(remove=[_out]):
        command = f'git diff --color=always -I"\version.*" {path.name} > .out'
        os.system(command)
        with open(_out) as pointer:
            lines = pointer.readlines()
            if lines:
                string = "".join(lines[:30])
                print(string)
                return False
    return True


def _print_results(path, results):
    if results.exists is True:
        print(f"{_colors.green_bold}PASS: {path.name} found ...{_colors.end}")
        if results.same is True:
            print(f"{_colors.green_bold}PASS: {path.name} same ...{_colors.end}")
        elif results.same is False:
            print(f"{_colors.red_bold}FAIL: {path.name} changed ...{_colors.end}")
        else:
            assert results.same == "SKIP"
    else:
        print(f"{_colors.red_bold}FAIL: {path.name} missing ...{_colors.end}")


def _run_scripts(layout_py):
    if layout_py.exists():
        os.system("python layout.py")
    flags = [
        "--also-untagged",
        "--clicktrack",
        "--log-timing",
        "--midi",
        "--pdf",
    ]
    string = " ".join(flags)
    command = f"python music.py {string}"
    os.system(command)


def _test_segment(segment_directory):
    assert segment_directory.parent.name == "segments", repr(segment_directory)
    metadata = baca.path.get_metadata(segment_directory)
    names = ["music.ily", "music.ly", "music.pdf"]
    if metadata.get("first_metronome_mark") is not False:
        names.extend(["clicktrack.midi", "music.midi"])
    names.sort()
    layout_py = segment_directory / "layout.py"
    if layout_py.exists():
        names.append("layout.ly")
    names.sort()
    path_to_results = {}
    for name in names:
        path = segment_directory / name
        path_to_results[path] = types.SimpleNamespace()
        if path.exists():
            path.unlink()
    _run_scripts(layout_py)
    for path, results in path_to_results.items():
        results.exists = path.is_file()
        if path.name == "music.pdf":
            results.same = "SKIP"
        else:
            results.same = _capture_diff(path)
    music_pdf = segment_directory / "music.pdf"
    if not music_pdf.exists():
        _music_ly_log = segment_directory / "_music_ly_log"
        if _music_ly_log.exists():
            with open(".music.ly.log") as pointer:
                lines = pointer.readlines()
                print("".join(lines))
    for path, results in path_to_results.items():
        _print_results(path, results)
    result = 0
    for results in path_to_results.values():
        if results.exists is False:
            result += 1
        if results.same is False:
            result += 1
    return result


if __name__ == "__main__":
    contents_directory = baca.path.get_contents_directory(os.getcwd())
    segments_directory = contents_directory / "segments"
    first_segment_directory = segments_directory / "01"
    if not first_segment_directory.is_dir():
        print("Score contains no segments ...")
        sys.exit(0)
    result = 0
    paths = list(sorted(segments_directory.glob("[0-9]*")))
    count = len(paths)
    for path in paths:
        if not path.is_dir():
            continue
        os.chdir(path)
        result_ = _test_segment(path)
        if result_ != 0:
            result = result_
        print()
    sys.exit(result)
