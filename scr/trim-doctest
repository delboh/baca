#! /usr/bin/env python
import os
import pathlib
import sys

os.system("clear")
if 1 < len(sys.argv):
    arguments = " ".join(sys.argv[1:])
    print(f"Running trim-doctest on {arguments} ...")
else:
    arguments = ""
    print(f"Running trim-doctest ...")

HOME = os.getenv("HOME")
output = pathlib.Path(f"{HOME}/.tmp/doctest.out")
os.system(f"ajv doctest --external-modules=baca -x {arguments} > {str(output)}")
os.system(f"cat {str(output)}")

keep, got, file_location_line = [], False, None
for line in output.open("r"):
    if line.startswith("File") and "line" in line:
        file_location_line = line
        print(file_location_line)
    if got:
        if line.startswith("*********"):
            break
        assert line[:4] == "    "
        line = line[4:]
        keep.append(line)
    if line == "Got:\n":
        got = True

if file_location_line:
    start = file_location_line.find('"') + 1
    stop = file_location_line.rfind('"')
    path = file_location_line[start:stop]
    line_number = int(file_location_line[stop:].split()[2].strip(","))
    path = pathlib.Path(path)
    with path.open() as pointer:
        source_lines = pointer.readlines()
    line_index = line_number - 1
    offending_line = source_lines[line_index]
    assert ">>>" in offending_line, repr(offending_line)
    index = offending_line.find(">")
    whitespace_indent = index * " "
    keep = [whitespace_indent + _ for _ in keep]
    text = "".join(keep)
    trimmed_output = output.with_suffix(".trimmed")
    trimmed_output.write_text(text)
