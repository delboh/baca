#! /usr/bin/env python
"""
Interprets build directory music.ly file.

Collects segments (and handles tags).

Skips segment collection when called with --skip-segment-collection.
"""
import os
import shutil
import sys

import abjad
import baca


def _check_layout_time_signatures(music_ly_file_path):
    print("Checking layout time signatures ...")
    build_directory = music_ly_file_path.parent
    layout_ly_file_path = build_directory / "layout.ly"
    if not layout_ly_file_path.is_file():
        print(f"No {layout_ly_file_path.trim()} found ...")
        return
    print(f"Found {layout_ly_file_path.trim()} ...")
    partial_score = baca.segments.get_preamble_partial_score(layout_ly_file_path)
    if partial_score:
        print(f"Found {layout_y_file_path.trim()} partial score comment ...")
        print("Aborting layout time signature check ...")
        return
    metadata_time_signatures = []
    for segment_directory in build_directory.segments.list_paths():
        time_signatures = segment_directory.get_metadatum("time_signatures")
        metadata_time_signatures.extend(time_signatures)
    if metadata_time_signatures:
        print("Found time signature metadata ...")
    layout_time_signatures = baca.segments.get_preamble_time_signatures(
        layout_ly_file_path
    )
    if layout_time_signatures == metadata_time_signatures:
        message = "Layout time signatures"
        message += f" ({len(layout_time_signatures)})"
        message += " match metadata time signatures"
        message += f" ({len(metadata_time_signatures)}) ..."
        print(message)
        return
    message = "Layout time signatures"
    message += f" ({len(layout_time_signatures)})"
    message += " do not match metadata time signatures"
    message += f" ({len(metadata_time_signatures)}) ..."
    print(message)
    print(f"Remaking {layout_ly_file_path.trim()} ...")
    layout_py = layout_ly_file_path.with_suffix(".py")
    os.system(f"make-layout-ly {layout_py}")
    layout_time_signatures = baca.segments.get_preamble_time_signatures(
        layout_ly_file_path
    )
    if layout_time_signatures == metadata_time_signatures:
        message = "Layout time signatures"
        message += f" ({len(layout_time_signatures)})"
        message += " match metadata time signatures"
        message += f" ({len(metadata_time_signatures)}) ..."
    else:
        message = "Layout time signatures"
        message += f" ({len(layout_time_signatures)})"
        message += " still do not match metadata time signatures"
        message += f" ({len(metadata_time_signatures)}) ..."
    print(message)


def _trim_illustration_ly(ly):
    assert ly.is_file()
    lines = []
    with ly.open() as file_pointer:
        found_score_context_open = False
        found_score_context_close = False
        for line in file_pointer.readlines():
            if r"\context Score" in line:
                found_score_context_open = True
            if line == "        >>\n":
                found_score_context_close = True
            if found_score_context_open:
                lines.append(line)
            if found_score_context_close:
                lines.append("\n")
                break
    if lines and lines[0].startswith("    "):
        lines = [_[8:] for _ in lines]
    if lines and lines[-1] == "\n":
        lines.pop()
    lines = "".join(lines)
    return lines


build_directory = os.getcwd()
build_directory = baca.Path(build_directory)
if not build_directory.is_score_build() and not build_directory.is_part():
    print("Must call script in score build directory or part build directory ...")
    sys.exit(-1)

music_ly_file_path = build_directory / "music.ly"
if music_ly_file_path.is_file():
    print(f"Found {music_ly_file_path.trim()} ...")
else:
    print(f"Missing {music_ly_file_path.trim()} ...")
    sys.exit(-1)

if "--skip-segment-collection" in sys.argv:
    print("Skipping segment collection ...")
else:
    print("Collecting segment lys ...")
    pairs = baca.build.collect_segment_lys(build_directory.build)
    if not pairs:
        print("... no segment lys found.")
        sys.exit(1)
    if build_directory._segments.exists():
        print(f"Removing {build_directory._segments.trim()} ...")
        build_directory._segments.remove()
    build_directory._segments.mkdir()
    for source, target in pairs:
        source_ily = source.with_suffix(".ily")
        target_ily = target.with_suffix(".ily")
        if target_ily.exists():
            print(f"Removing {target_ily.trim()} ...")
        if source_ily.is_file():
            print(f"Writing {target_ily.trim()} ...")
            shutil.copyfile(str(source_ily), target_ily)
        if target.exists():
            print(f"Removing {target.trim()} ...")
        print(f"Writing {target.trim()} ...")
        text = _trim_illustration_ly(source)
        target.write_text(text)
        segment = source.parent
    baca.build.handle_build_tags(build_directory)

if build_directory.is_part():
    if "--skip-segment-collection" in sys.argv:
        print("Skipping tag handling ...")
    else:
        os.system("handle-part-tags")

_check_layout_time_signatures(music_ly_file_path)
baca.build.run_lilypond(music_ly_file_path)

if build_directory._segments.is_dir():
    print(f"Removing {build_directory._segments.trim()} ...")
    build_directory._segments.remove()
