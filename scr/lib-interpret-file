#! /usr/bin/env bash

source lib-path-manipulation

interpret_ly() {
    LY="$1"
    if [ ! -f "$LY" ]; then
        echo Can not find "$LY" ...
    fi
    SEGMENT_DIRECTORY=$(dirname "$LY")
    BASENAME=$(basename "$LY")
    WITHOUT_SUFFIX=${BASENAME%".ly"}
    WITHOUT_SUFFIX=${SEGMENT_DIRECTORY}/${WITHOUT_SUFFIX}
    LOG="$SEGMENT_DIRECTORY/.log"
    PDF="$SEGMENT_DIRECTORY"/illustration.pdf
    BACKUP_PDF="$SEGMENT_DIRECTORY"/illustration._backup.pdf
    if [ -f "$PDF" ]; then
        trash "$PDF"
    fi
    echo Interpreting "$LY" ...
    date +%Y-%m-%d\ %H:%M:%S > "$LOG"
    lilypond -dno-point-and-click -o ${WITHOUT_SUFFIX} ${LY} >>${LOG} 2>&1
}

interpret_tex() {
    TEX="$PWD/"$1".tex"

    if [ ! -f "$TEX" ]; then
        echo "Can not find ${TEX} ..."
    fi

    PDF="$PWD/"$1".pdf"
    if [ -f "$PDF" ]; then
        trash "$PDF"
    fi

    echo "Interpreting ${TEX} ..."

    LOG="$HOME/.abjad/latex.log"
    OPTIONS="-halt-on-error -interaction=nonstopmode --jobname=$1"

    date > "$LOG"
    xelatex "$OPTIONS" -output-directory="$PWD" "$TEX" >> "$LOG" 2>&1
    xelatex "$OPTIONS" -output-directory="$PWD" "$TEX" >> "$LOG" 2>&1
    rm *.aux
    rm *.log

    if [ -f "$PDF" ]; then
        echo "Found ${PDF} ..."
        echo "Opening ${PDF} ..."
        open "$PDF"
    else
        echo "ERROR IN LATEX LOG FILE ..." 
    fi
}

bcti() { interpret_tex back-cover; }

fcti() { interpret_tex front-cover; }

ili() {
    paths=$(find . -name illustration.ly | sort)
    PATH_COUNT=0

    for path in $paths; do
        PATH_COUNT=$((PATH_COUNT+1))
    done

    for path in $paths; do
        LY=$(realpath $path)
        SEGMENT_DIRECTORY=$(dirname "$LY")
        PDF="$SEGMENT_DIRECTORY"/illustration.pdf
        SECONDS=0
        interpret_ly "$LY"
        if [ -f "$PDF" ]; then
            echo Found "$PDF" ...
            if [ "$PATH_COUNT" -eq 1 ]; then
                open "$PDF"
            fi
        else
            echo Can not produce "$PDF" ...
        fi
        if [ "$SECONDS" -eq 1 ]; then
            echo "Total time ${SECONDS} second ..."
        else
            echo "Total time ${SECONDS} seconds ..."
        fi
        echo
    done
}

pfti() { interpret_tex preface; }

pti() { interpret_tex part; }

sti() { interpret_tex score; }
