#! /usr/bin/env python
import io
import os
import shutil
import subprocess
import sys

import helpers

import abjad
import baca


def _generate_document(path):
    directory = path.parent
    values = {}
    paper_size = directory.get_metadatum("paper_size", "letter")
    orientation = directory.get_metadatum("orientation")
    paper_size = helpers._to_paper_dimensions(paper_size, orientation)
    width, height, unit = paper_size
    paper_size = f"{{{width}{unit}, {height}{unit}}}"
    values["paper_size"] = paper_size
    if path.name.endswith("score.tex"):
        name = "score.tex"
    elif path.name.endswith("part.tex"):
        name = "part.tex"
        dashed_part_name = path.name.strip("-part.tex")
        values["dashed_part_name"] = dashed_part_name
    else:
        raise ValueError(path.name)
    helpers._copy_boilerplate(directory, name, target_name=path.name, values=values)


for string in sys.argv[1:]:
    if string.startswith("--directory="):
        directory = string[12:]
        break
else:
    directory = os.getcwd()
directory = baca.Path(directory)

if directory.parent.name != "builds":
    print("Must run script in score build directory ...")
    sys.exit(-1)

print("Building score ...")
os.system("interpret_build_music --do-not-open")
print()
tex = directory.build / "front-cover.tex"
pdf = directory.build / "front-cover.pdf"
if tex.is_file():
    helpers._interpret_tex_file(directory.build / "front-cover.tex")
elif pdf.is_file():
    print(f"Using existing {pdf.trim()} ...")
else:
    print("Missing front cover ...")
    sys.exit(-1)
print()
tex = directory.build / "preface.tex"
pdf = directory.build / "preface.pdf"
if tex.is_file():
    helpers._interpret_tex_file(directory.build / "preface.tex")
elif pdf:
    print(f"Using existing {pdf.trim()} ...")
else:
    print("Missing preface ...")
    sys.exit(-1)
print()
tex = directory.build / "back-cover.tex"
pdf = directory.build / "back-cover.pdf"
if tex.is_file():
    helpers._interpret_tex_file(directory.build / "back-cover.tex")
elif pdf.is_file():
    print(f"Using existing {pdf.trim()} ...")
else:
    print("Missing back cover ...")
    sys.exit(-1)
print()
print("Generating score ...")
path = directory.build / "score.tex"
_generate_document(path)
print()
helpers._interpret_tex_file(path)
score_pdf = directory.build / "score.pdf"
print(f"Opening {score_pdf.trim()} ...")
os.system(f"open {score_pdf}")
