#! /usr/bin/env python
import os
import shutil
import sys

import helpers

import abjad
import baca


def _make_segment_pdf(directory, layout=True, open_after=True):
    assert directory.is_segment()
    if layout is True:
        helpers._make_layout_ly(directory / "layout.py")
    definition = directory / "definition.py"
    if not definition.is_file():
        print(f"Can not find {definition.trim()} ...")
        sys.exit(-1)
    print(f"Making segment {directory.name} PDF ...")
    ly = directory / "illustration.ly"
    if ly.exists():
        print(f"Removing {ly.trim()} ...")
        ly.remove()
    pdf = directory / "illustration.pdf"
    if pdf.exists():
        print(f"removing {pdf.trim()} ...")
        pdf.remove()
    maker = directory / "__make_segment_pdf__.py"
    maker.remove()
    with abjad.FilesystemState(remove=[maker]):
        helpers._copy_boilerplate(directory, maker.name)
        previous_segment = directory.get_previous_package()
        if previous_segment is None:
            statement = "previous_metadata = None"
            persist_statement = "previous_persist = None"
        else:
            metadata = previous_segment / "__metadata__.py"
            statement = f'file = baca.Path("{metadata}")'
            statement += "\n        lines = file.read_text()"
            statement += "\n        exec(lines)"
            statement += "\n        previous_metadata = metadata"
            persist = previous_segment / "__persist__.py"
            persist_statement = f'file = baca.Path("{persist}")'
            persist_statement += "\n        lines = file.read_text()"
            persist_statement += "\n        exec(lines)"
            persist_statement += "\n        previous_persist = persist"
        template = maker.read_text()
        completed_template = template.format(
            previous_segment_metadata_import_statement=statement,
            previous_segment_persist_import_statement=persist_statement,
        )
        maker.write_text(completed_template)
        print(f"Interpreting {maker.trim()} ...")
        result = helpers._interpret_file(maker)
        if ly.is_file():
            print(f"Found {ly.trim()} ...")
        if pdf.is_file():
            print(f"Found {pdf.trim()} ...")
        print(f"Removing {maker.trim()} ...")
    stdout_lines, stderr_lines, exit_code = result
    if exit_code:
        for string in stderr_lines:
            print(string)
        sys.exit(exit_code)
    if pdf.is_file() and open_after:
        os.system(f"open {pdf}")
    __pycache__ = directory / "__pycache__"
    __pycache__.remove()


for string in sys.argv[1:]:
    if string.startswith("--directory="):
        directory = string[12:]
        break
else:
    directory = os.getcwd()
directory = baca.Path(directory)
if not (directory.is_segment() or directory.is_segments()):
    print("Must call script in segment or segments directory ...")
    sys.exit(-1)

if directory.is_segment():
    if "--do-not-open" in sys.argv[1:]:
        open_after = False
    else:
        open_after = True
    _make_segment_pdf(directory, open_after=open_after)
else:
    assert directory.is_segments()
    if "--do-not-open" in sys.argv[1:]:
        print("Use --do-not-open only in segment directory ...")
        sys.exit(-1)
    exit = 0
    paths = directory.list_paths()
    paths = [_ for _ in paths if _.is_dir()]
    for i, path in enumerate(paths):
        exit_ = _make_segment_pdf(path, open_after=False)
        if i + 1 < len(paths):
            print()
        else:
            abjad.io.spawn_subprocess('say "done"')
